// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client"; 

// Default database URL configuration
const defaultOptions = {
  apiKey: process.env.XATA_API_KEY,   // Your Xata API key
  databaseURL: process.env.XATA_DATABASE_URL,  // The URL of your Xata database
  branch: 'main',  // Default to 'main' branch if not set
};

// Correctly structure your tables for compatibility
/** @typedef { import('./types').SchemaTables } SchemaTables */
const tables = [
  {
    name: "maps_scores",
    checkConstraints: {
      maps_scores_xata_id_length_xata_id: {
        name: "maps_scores_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_maps_scores_xata_id_key: {
        name: "_pgroll_new_maps_scores_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      { name: "Duration", type: "text", notNull: false },
      { name: "Map", type: "text", notNull: false },
      { name: "Match_Name", type: "text", notNull: false },
      { name: "Match_Type", type: "text", notNull: false },
      { name: "Stage", type: "text", notNull: false },
      { name: "Team_A", type: "text", notNull: false },
      { name: "Team_A_Attacker_Score", type: "int", notNull: false },
      { name: "Team_A_Defender_Score", type: "int", notNull: false },
      { name: "Team_A_Overtime_Score", type: "int", notNull: false },
      { name: "Team_A_Score", type: "int", notNull: false },
      { name: "Team_B", type: "text", notNull: false },
      { name: "Team_B_Attacker_Score", type: "int", notNull: false },
      { name: "Team_B_Defender_Score", type: "int", notNull: false },
      { name: "Team_B_Overtime_Score", type: "int", notNull: false },
      { name: "Team_B_Score", type: "int", notNull: false },
      { name: "Tournament", type: "text", notNull: false },
      { name: "xata_createdat", type: "datetime", notNull: true, defaultValue: "now()" },
      { name: "xata_id", type: "text", notNull: true, unique: true, defaultValue: "('rec_'::text || (xata_private.xid())::text)" },
      { name: "xata_updatedat", type: "datetime", notNull: true, defaultValue: "now()" },
      { name: "xata_version", type: "int", notNull: true, defaultValue: "0" },
    ],
  },
  {
    name: "players_stats",
    checkConstraints: {
      players_stats_xata_id_length_xata_id: {
        name: "players_stats_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_players_stats_xata_id_key: {
        name: "_pgroll_new_players_stats_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      { name: "Agents", type: "text", notNull: false },
      { name: "Assists", type: "int", notNull: false },
      { name: "Assists_Per_Round", type: "float", notNull: false },
      { name: "Average_Combat_Score", type: "int", notNull: false },
      { name: "Average_Damage_Per_Round", type: "int", notNull: false },
      { name: "Clutch_Success", type: "text", notNull: false },
      { name: "Clutches_won_played", type: "text", notNull: false },
      { name: "Deaths", type: "int", notNull: false },
      { name: "First_Deaths", type: "int", notNull: false },
      { name: "First_Deaths_Per_Round", type: "float", notNull: false },
      { name: "First_Kills", type: "int", notNull: false },
      { name: "First_Kills_Per_Round", type: "float", notNull: false },
      { name: "Headshot_Percentage", type: "text", notNull: false },
      { name: "KD", type: "float", notNull: false },
      { name: "Kill_Assist_Trade_Survive_Percentage", type: "text", notNull: false },
      { name: "Kills", type: "int", notNull: false },
      { name: "Kills_Per_Round", type: "float", notNull: false },
      { name: "Match_Type", type: "text", notNull: false },
      { name: "Maximum_Kills_in_a_Single_Map", type: "int", notNull: false },
      { name: "Player", type: "text", notNull: false },
      { name: "Rating", type: "float", notNull: false },
      { name: "Rounds_Played", type: "int", notNull: false },
      { name: "Stage", type: "text", notNull: false },
      { name: "Teams", type: "text", notNull: false },
      { name: "Tournament", type: "text", notNull: false },
      { name: "xata_createdat", type: "datetime", notNull: true, defaultValue: "now()" },
      { name: "xata_id", type: "text", notNull: true, unique: true, defaultValue: "('rec_'::text || (xata_private.xid())::text)" },
      { name: "xata_updatedat", type: "datetime", notNull: true, defaultValue: "now()" },
      { name: "xata_version", type: "int", notNull: true, defaultValue: "0" },
    ],
  },
];

// Xata client setup using the buildClient function from @xata.io/client
/** @typedef { import('@xata.io/client').ClientConstructor<{}> } DatabaseClient */
class XataClient extends buildClient() {
  constructor(options) {
    super({ ...defaultOptions, ...options });
  }
}

// Singleton instance of XataClient
let instance = undefined;

/** @type { () => XataClient } */
export const getXataClient = () => {
  if (instance) return instance;
  instance = new XataClient();
  return instance;
};
