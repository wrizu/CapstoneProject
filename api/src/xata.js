// xata.js
// Generated by Xata Codegen. Do not edit manually unless you know what you're doing.

import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import { buildClient } from '@xata.io/client';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables from project root
dotenv.config({ path: path.resolve(__dirname, '../process.env') });

const tables = [
  {
    name: 'maps_scores',
    columns: [
      { name: 'Duration', type: 'text' },
      { name: 'Map', type: 'text' },
      { name: 'Match_Name', type: 'text' },
      { name: 'Match_Type', type: 'text' },
      { name: 'Stage', type: 'text' },
      { name: 'Team_A', type: 'text' },
      { name: 'Team_A_Attacker_Score', type: 'int' },
      { name: 'Team_A_Defender_Score', type: 'int' },
      { name: 'Team_A_Overtime_Score', type: 'int' },
      { name: 'Team_A_Score', type: 'int' },
      { name: 'Team_B', type: 'text' },
      { name: 'Team_B_Attacker_Score', type: 'int' },
      { name: 'Team_B_Defender_Score', type: 'int' },
      { name: 'Team_B_Overtime_Score', type: 'int' },
      { name: 'Team_B_Score', type: 'int' },
      { name: 'Tournament', type: 'text' },
      { name: 'xata_createdat', type: 'datetime', notNull: true, defaultValue: 'now()' },
      { name: 'xata_id', type: 'text', notNull: true, unique: true },
      { name: 'xata_updatedat', type: 'datetime', notNull: true, defaultValue: 'now()' },
      { name: 'xata_version', type: 'int', notNull: true, defaultValue: '0' },
    ],
    uniqueConstraints: {
      _pgroll_new_maps_scores_xata_id_key: {
        name: '_pgroll_new_maps_scores_xata_id_key',
        columns: ['xata_id'],
      },
    },
    checkConstraints: {
      maps_scores_xata_id_length_xata_id: {
        name: 'maps_scores_xata_id_length_xata_id',
        columns: ['xata_id'],
        definition: 'CHECK ((length(xata_id) < 256))',
      },
    },
  },
  {
    name: 'players_stats',
    columns: [
      { name: 'Agents', type: 'text' },
      { name: 'Assists', type: 'int' },
      { name: 'Assists_Per_Round', type: 'float' },
      { name: 'Average_Combat_Score', type: 'int' },
      { name: 'Average_Damage_Per_Round', type: 'int' },
      { name: 'Clutch_Success', type: 'text' },
      { name: 'Clutches_won_played', type: 'text' },
      { name: 'Deaths', type: 'int' },
      { name: 'First_Deaths', type: 'int' },
      { name: 'First_Deaths_Per_Round', type: 'float' },
      { name: 'First_Kills', type: 'int' },
      { name: 'First_Kills_Per_Round', type: 'float' },
      { name: 'Headshot_Percentage', type: 'text' },
      { name: 'KD', type: 'float' },
      { name: 'Kill_Assist_Trade_Survive_Percentage', type: 'text' },
      { name: 'Kills', type: 'int' },
      { name: 'Kills_Per_Round', type: 'float' },
      { name: 'Match_Type', type: 'text' },
      { name: 'Maximum_Kills_in_a_Single_Map', type: 'int' },
      { name: 'Player', type: 'text' },
      { name: 'Rating', type: 'float' },
      { name: 'Rounds_Played', type: 'int' },
      { name: 'Stage', type: 'text' },
      { name: 'Teams', type: 'text' },
      { name: 'Tournament', type: 'text' },
      { name: 'xata_createdat', type: 'datetime', notNull: true, defaultValue: 'now()' },
      { name: 'xata_id', type: 'text', notNull: true, unique: true },
      { name: 'xata_updatedat', type: 'datetime', notNull: true, defaultValue: 'now()' },
      { name: 'xata_version', type: 'int', notNull: true, defaultValue: '0' },
    ],
    uniqueConstraints: {
      _pgroll_new_players_stats_xata_id_key: {
        name: '_pgroll_new_players_stats_xata_id_key',
        columns: ['xata_id'],
      },
    },
    checkConstraints: {
      players_stats_xata_id_length_xata_id: {
        name: 'players_stats_xata_id_length_xata_id',
        columns: ['xata_id'],
        definition: 'CHECK ((length(xata_id) < 256))',
      },
    },
  },
];

const DatabaseClient = buildClient();

export class XataClient extends DatabaseClient {
  constructor(options = {}) {
    super(
      {
        databaseURL: process.env.XATA_DATABASE_URL,
        apiKey: process.env.XATA_API_KEY,
        branch: 'main',
        ...options,
      },
      tables
    );
  }
}

let instance;
export const getXataClient = () => {
  if (!instance) {
    instance = new XataClient();
  }
  return instance;
};
