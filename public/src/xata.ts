// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "maps_scores",
    checkConstraints: {
      maps_scores_xata_id_length_xata_id: {
        name: "maps_scores_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_maps_scores_xata_id_key: {
        name: "_pgroll_new_maps_scores_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "Duration",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Map",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Match_Name",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Match_Type",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Stage",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Team_A",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Team_A_Attacker_Score",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Team_A_Defender_Score",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Team_A_Overtime_Score",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Team_A_Score",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Team_B",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Team_B_Attacker_Score",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Team_B_Defender_Score",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Team_B_Overtime_Score",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Team_B_Score",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Tournament",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "players_stats",
    checkConstraints: {
      players_stats_xata_id_length_xata_id: {
        name: "players_stats_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_players_stats_xata_id_key: {
        name: "_pgroll_new_players_stats_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "Agents",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Assists",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Assists_Per_Round",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Average_Combat_Score",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Average_Damage_Per_Round",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Clutch_Success",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Clutches_won_played",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Deaths",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "First_Deaths",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "First_Deaths_Per_Round",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "First_Kills",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "First_Kills_Per_Round",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Headshot_Percentage",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "KD",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Kill_Assist_Trade_Survive_Percentage",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Kills",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Kills_Per_Round",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Match_Type",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Maximum_Kills_in_a_Single_Map",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Player",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Rating",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Rounds_Played",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Stage",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Teams",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "Tournament",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type MapsScores = InferredTypes["maps_scores"];
export type MapsScoresRecord = MapsScores & XataRecord;

export type PlayersStats = InferredTypes["players_stats"];
export type PlayersStatsRecord = PlayersStats & XataRecord;

export type DatabaseSchema = {
  maps_scores: MapsScoresRecord;
  players_stats: PlayersStatsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: process.env.DATABASE_URL,
};

export class XataApiClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataApiClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataApiClient();
  return instance;
};
